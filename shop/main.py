#! /usr/bin/env python
# -*- coding: utf-8 -*-
import sqlite3

import menu
import settings
import functions as func
import telebot
from telebot import types
import time
import datetime
import random
import requests

catalog_dict = {}
product_dict = {}
download_dict = {}
balance_dict = {}
admin_sending_messages_dict = {}
replenishment_dict = {}
ok_pay_dict = {}


def start_bot():
    bot = telebot.TeleBot(settings.bot_token)

    # Command start
    @bot.message_handler(commands=['start'])
    def handler_start(message):
        chat_id = message.chat.id
        func.first_join(user_id=chat_id, name=message.from_user.username, code=message.text[6:])
        bot.send_message(chat_id,
                         f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}',
                         reply_markup=menu.main_menu)

    # Command admin
    @bot.message_handler(commands=['admin'])
    def handler_admin(message):
        chat_id = message.chat.id
        if chat_id == settings.admin_id:
            bot.send_message(chat_id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞', reply_markup=menu.admin_menu)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    @bot.callback_query_handler(func=lambda call: True)
    def handler_call(call):
        chat_id = call.message.chat.id
        message_id = call.message.message_id

        # Main menu
        if call.data == 'catalog':
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f'üóÉ –ö–∞—Ç–∞–ª–æ–≥\n'
                     f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—É–∂–µ–Ω\n',
                reply_markup=func.menu_catalog()
            )

        if call.data == 'exit_from_catalog':
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥',
                reply_markup=menu.main_menu
            )

        if call.data in func.list_sections():
            name = call.data
            product = func.Product(chat_id)
            product_dict[call.message.chat.id] = product
            product.section = name

            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f'‚ùï –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä',
                reply_markup=func.menu_section(call.data)
            )

        if call.data in func.list_product():
            conn = sqlite3.connect("base_ts.sqlite")
            cursor = conn.cursor()
            cursor.execute(f'SELECT * FROM "{call.data}"')
            row = cursor.fetchall()

            product = func.Product(chat_id)
            product_dict[chat_id] = product
            product = product_dict[chat_id]

            info = func.menu_product(call.data, product)
            product.product = info[1].product
            product.section = info[1].section
            product.price = info[1].price
            product.name = info[1].name

            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=info[0],
                reply_markup=menu.btn_purchase
            )

        if call.data == 'buy':
            try:
                product = product_dict[chat_id]

                code = random.randint(111, 999)
                product.code = code

                msg = bot.send_message(chat_id=chat_id,
                                       text=f'‚ùï –í—ã –≤—ã–±—Ä–∞–ª–∏ - {product.name}\n'
                                            f'‚ùï –¶–µ–Ω–∞ - {float(product.price)} —Ä—É–±\n'
                                            f'üëâ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {code}')
                bot.register_next_step_handler(msg, buy_2)

            except:
                bot.send_message(chat_id=chat_id,
                                 text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                                 reply_markup=menu.main_menu)

        if call.data == 'info':
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=settings.info,
                reply_markup=menu.main_menu
            )

        if call.data == 'purchases':
            msg = func.basket(chat_id)
            if len(msg) > 0:
                bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=msg,
                                      reply_markup=menu.main_menu)
            if len(msg) == 0:
                bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text='–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫ üò¢',
                                      reply_markup=menu.main_menu)

        if call.data == 'exit_to_menu':
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=menu.main_menu
            )

        if call.data == 'btn_ok':
            bot.delete_message(chat_id, message_id)

        if call.data == 'profile':
            info = func.profile(chat_id)
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=message_id,
                                  text=settings.profile.format(
                                      id=info[0],
                                      login=f'{info[1]}',
                                      data=info[2][:19],
                                      balance=info[5]
                                  ),
                                  reply_markup=menu.main_menu)

        if call.data == 'replenishment':
            try:
                bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Å–ø–æ—Å–æ–±',
                                      reply_markup=menu.replenishments)



            except:
                bot.send_message(chat_id=chat_id,
                                 text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                                 reply_markup=menu.main_menu)

        if call.data == 'replenishment2':
            try:
                bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Å–ø–æ—Å–æ–±',
                                      reply_markup=menu.replenishments)



            except:
                bot.send_message(chat_id=chat_id,
                                 text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                                 reply_markup=menu.main_menu)

        if call.data == 'crypto':
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=message_id,
                                  text='–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É',
                                  reply_markup=menu.crypto)

        if call.data == 'no_crypto':
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=message_id,
                                  text=f'‚ùó –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —á–µ—Ä–µ–∑ @CryptoBot\n'
                                       f'–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n'
                                       f'üí∞ Bitcoin|BTC\n'
                                       f'üí∞ Monero|XMR\n'
                                       f'üí∞ Binance coin|BNB\n'
                                       f'üí∞ Binance USD|BUSD\n'
                                       f'üí∞ USD Coin|USDC\n'
                                       f'üí∞ Tether|USDT\n'
                                       f'‚úÖ –ü–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª: –£ –º–µ–Ω—è –µ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n'
                                       f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥\n'
                                       f'üíµ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞, –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç\n'
                                       f'‚ùó‚ùó‚ùó –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –¥–µ–Ω–µ–≥,'
                                       f'–Ω–µ —Å—Ç–æ–∏—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å –æ–∫–Ω–æ —Å —Å—É–º–º–æ–π –ø–µ—Ä–µ–≤–æ–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è'
                                       f'–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—É—Ä—Å–∞ –Ω–∞ –±–∏—Ä–∂–µ ‚ùó‚ùó‚ùó',
                                  reply_markup=menu.i_buy_cr,

                                  )
        if call.data == 'main':
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=message_id,
                                  text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                                  reply_markup=menu.main_menu)

        if call.data == 'BTC':
            msg = bot.send_message(chat_id=chat_id,
                                   text=f'‚ÇΩ –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å')
            bot.register_next_step_handler(msg, btc)

        if call.data == 'XMR':
            msg = bot.send_message(chat_id=chat_id,
                                   text=f'‚ÇΩ –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å')
            bot.register_next_step_handler(msg, xmr)

        if call.data == 'BNB':
            msg = bot.send_message(chat_id=chat_id,
                                   text=f'‚ÇΩ –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å')
            bot.register_next_step_handler(msg, bnb)

        if call.data == 'USDC':
            msg = bot.send_message(chat_id=chat_id,
                                   text=f'‚ÇΩ –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å')
            bot.register_next_step_handler(msg, usdc)

        if call.data == 'USDT':
            msg = bot.send_message(chat_id=chat_id,
                                   text=f'‚ÇΩ –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å')
            bot.register_next_step_handler(msg, usdt)

        # if call.data == 'DASH':
        #     msg = bot.send_message(chat_id=chat_id,
        #                            text=f'‚ÇΩ –£–∫–∞–∂–∏—Ç–µ –∫–∞–∫—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å')
        #     bot.register_next_step_handler(msg, dash)
        # Admin menu
        if call.data == 'admin_info':
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=func.admin_info(),
                reply_markup=menu.admin_menu
            )

        if call.data == 'add_section_to_catalog':
            if chat_id == settings.admin_id:
                msg = bot.send_message(chat_id=chat_id,
                                       text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞')
                bot.register_next_step_handler(msg, create_section)

        if call.data == 'del_section_to_catalog':
            if chat_id == settings.admin_id:
                conn = sqlite3.connect("base_ts.sqlite")
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM catalog')
                row = cursor.fetchall()
                cursor.close()
                conn.close()

                text = ''
                num = 0

                for i in row:
                    text = text + '‚Ññ ' + str(num) + '   |  ' + str(i[0]) + '\n'
                    num += 1

                msg = bot.send_message(
                    chat_id=chat_id,
                    text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞\n\n'
                         f'{text}'
                )
                bot.register_next_step_handler(msg, del_section)

        if call.data == 'add_product_to_section':
            if chat_id == settings.admin_id:
                conn = sqlite3.connect("base_ts.sqlite")
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM catalog')
                row = cursor.fetchall()

                text = ''
                num = 0

                for i in row:
                    text = text + '‚Ññ ' + str(num) + '   |  ' + str(i[0]) + '\n'
                    num += 1

                msg = bot.send_message(chat_id=chat_id,
                                       text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –≤ –∫–æ—Ç–æ—Ä—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n\n'
                                            f'{text}')
                bot.register_next_step_handler(msg, create_product)

        if call.data == 'del_product_to_section':
            if chat_id == settings.admin_id:
                conn = sqlite3.connect("base_ts.sqlite")
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM catalog')
                row = cursor.fetchall()

                text = ''
                num = 0

                for i in row:
                    text = text + '‚Ññ ' + str(num) + '   |  ' + str(i[0]) + '\n'
                    num += 1

                msg = bot.send_message(chat_id=chat_id,
                                       text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä\n\n'
                                            f'{text}')
                bot.register_next_step_handler(msg, del_product)

        if call.data == 'download_product':
            conn = sqlite3.connect("base_ts.sqlite")
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM catalog')
            row = cursor.fetchall()

            text = ''
            num = 0

            for i in row:
                text = text + '‚Ññ ' + str(num) + '   |  ' + str(i[0]) + '\n'
                num += 1

            msg = bot.send_message(chat_id=chat_id,
                                   text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞\n\n'
                                        f'{text}')
            bot.register_next_step_handler(msg, download_product)

        if call.data == 'exit_admin_menu':
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text='–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                reply_markup=menu.main_menu
            )

        if call.data == 'back_to_admin_menu':
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                reply_markup=menu.admin_menu
            )

        if call.data == 'catalog_control':
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º',
                reply_markup=menu.admin_menu_control_catalog
            )

        if call.data == 'section_control':
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏',
                reply_markup=menu.admin_menu_control_section
            )

        if call.data == 'replenish_balance':
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=message_id,
                                  text=func.replenish_balance(chat_id),
                                  reply_markup=menu.replenish_balance)

        if call.data == 'i_pay':
            repl = replenishment_dict[chat_id]
            func.i_pay(repl.code)
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=message_id,
                                  text=f'‚ùó‚ùó‚ùó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @test —á–µ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è‚ùó‚ùó‚ùó\n'
                                       f'‚úÖ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å ',
                                  reply_markup=menu.main_menu)
            bot.send_message(
                chat_id=settings.CHANNEL_ID2,
                text=f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{repl.username} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É\n'
                     f'‚ùó –ï—Å–ª–∏ username None, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ id: {repl.id}\n'
                     f'üí∞ –ù–∞ —Å—É–º–º—É: {repl.sum}—Ä.\n'
                     f'üí± –í–∞–ª—é—Ç–∞: {repl.valute}\n'
                     f'üîê –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–ª–∞—Ç–µ–∂–∞: {repl.code}\n'
                     f'üíµ –°—É–º–º–∞ –≤ –≤–∞–ª—é—Ç–µ: {repl.crypt}\n'
                     f'‚ÄºÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂, –µ—Å–ª–∏ –æ–Ω –≤–µ—Ä–µ–Ω ‚ÄºÔ∏è'
            )

        if call.data == 'ok_pay':
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=message_id,
                                  text=f'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n',
                                  reply_markup=menu.met_ch)

        if call.data == 'u_name':
            msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                        message_id=message_id,
                                        text=f'–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å @\n'
                                             f'–ü–ª–∞—Ç–µ–∂–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            bot.register_next_step_handler(msg, ok_pay)

        if call.data == 'u_id':
            msg = bot.edit_message_text(chat_id=call.message.chat.id,
                                        message_id=message_id,
                                        text=f'–í–≤–µ–¥–∏—Ç–µ userid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
                                             f'–ü–ª–∞—Ç–µ–∂–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            bot.register_next_step_handler(msg, ok_pay2)

        if call.data == 'cancel_payment':
            func.cancel_payment(chat_id)
            bot.edit_message_text(chat_id=chat_id,
                                  message_id=message_id,
                                  text='‚ùï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                                  reply_markup=menu.main_menu)

        if call.data == 'check_payment':
            check = func.check_payment(chat_id)
            if check[0] == 1:
                bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞\n–°—É–º–º–∞ - {check[1]} —Ä—É–±',
                                      reply_markup=menu.main_menu)

                bot.send_message(chat_id=settings.admin_id,
                                 text='üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n'
                                      f'üî• –û—Ç - {chat_id}\n'
                                      f'üî• –°—É–º–º–∞ - {check[1]} —Ä—É–±')

                try:
                    bot.send_message(chat_id=f'-100{settings.CHANNEL_ID}',
                                     text='üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n'
                                          f'üî• –û—Ç - {chat_id}\n'
                                          f'üî• –°—É–º–º–∞ - {check[1]} —Ä—É–±')
                except:
                    pass

            if check[0] == 0:
                bot.send_message(chat_id=chat_id,
                                 text='‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                                 reply_markup=menu.to_close)

        if call.data == 'to_close':
            bot.delete_message(chat_id=chat_id,
                               message_id=message_id)

        if call.data == 'give_balance':
            msg = bot.send_message(chat_id=chat_id,
                                   text=f'–í–≤–µ–¥–∏—Ç–µ USERNAME —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—ë–Ω –±–∞–ª–∞–Ω—Å\n'
                                        f'Username –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å —Å @')

            bot.register_next_step_handler(msg, give_balance)

        if call.data == 'admin_sending_messages':
            msg = bot.send_message(chat_id,
                                   text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
            bot.register_next_step_handler(msg, admin_sending_messages)

        if call.data == 'referral_web':
            ref_code = func.check_ref_code(chat_id)
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–µ—Ç—å\n\n'
                     f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
                     f'https://teleg.run/{settings.bot_login}?start={ref_code}\n\n'
                     f'–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ - {func.check_all_profit_user(chat_id)} ‚ÇΩ\n\n'
                     f'<i>–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {settings.ref_percent} % –æ—Ç —Å—É–º–º—ã –µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞</i>',
                reply_markup=menu.main_menu,
                parse_mode='html'
            )

        if call.data == 'admin_top_ref':
            bot.send_message(
                chat_id=chat_id,
                text=func.admin_top_ref(),
                parse_mode='html'
            )

        if call.data.isdigit():
            if 99 < int(call.data) < 1000:
                func.agree(ok_pay_dict[int(call.data)].u_id, ok_pay_dict[int(call.data)].sum,
                           ok_pay_dict[int(call.data)].code)
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(
                    chat_id=chat_id,
                    text='–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                )
                bot.send_message(
                    chat_id=ok_pay_dict[int(call.data)].chat_id,
                    text=f'‚úÖ–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É {ok_pay_dict[int(call.data)].sum} –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ'
                )
            if 1099 < int(call.data) < 2000:
                temp = int(call.data) - 1000
                bot.delete_message(call.message.chat.id, call.message.message_id)
                func.disagree(ok_pay_dict[int(temp)].u_id, ok_pay_dict[int(temp)].code)
                bot.send_message(
                    chat_id=chat_id,
                    text='–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω',
                )

    def give_balance(message):
        try:
            balance = func.GiveBalance(message.text)
            balance_dict[message.chat.id] = balance

            msg = bot.send_message(chat_id=message.chat.id,
                                   text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∏–∑–º–µ–Ω–∏—Ç—Å—è –±–∞–ª–∞–Ω—Å(–∫ –±–∞–ª–∞–Ω—Å—É –Ω–µ –¥–æ–±–∞–≤–∏—Ç—Å—è —ç—Ç–∞ —Å—É–º–º–∞, –∞ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –Ω–µ—ë)')
            bot.register_next_step_handler(msg, give_balance_2)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.main_menu)

    def give_balance_2(message):
        try:
            balance = balance_dict[message.chat.id]
            balance.balance = message.text
            code = random.randint(111, 999)
            balance.code = code
            msg = bot.send_message(chat_id=message.chat.id,
                                   text=f'Username - {balance.login}\n'
                                        f'–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ - {balance.balance}\n'
                                        f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ {code}')

            bot.register_next_step_handler(msg, give_balance_3)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.main_menu)

    def give_balance_3(message):
        try:
            balance = balance_dict[message.chat.id]
            if int(message.text) == balance.code:
                func.give_balance(balance)
                bot.send_message(chat_id=message.chat.id,
                                 text='‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω')
                bot.send_message(chat_id=func.get_id(balance.login),
                                 text=f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ\n'
                                      f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance.balance}—Ä')
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.main_menu)

    def create_section(message):
        try:
            name = message.text
            catalog = func.Catalog(name)
            catalog_dict[message.chat.id] = catalog
            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('Yes', 'No')
            msg = bot.send_message(chat_id=message.chat.id,
                                   text=name + '\n\n –°–æ–∑–¥–∞—Ç—å?',
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, create_section_2)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.main_menu)

    def buy_2(message):
        try:
            product = product_dict[message.chat.id]
            if int(message.text) == product.code:
                check = func.check_balance(product.user_id, (float(product.price)))

                if check == 1:
                    lists = func.buy(product)
                    bot.send_message(chat_id=message.chat.id,
                                     text=f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä, —Å–ø–∞—Å–∏–±–æ\n\n'
                                          f'{lists}\n'
                                          f'–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è\n'
                                          f'–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω username, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç @Igcventure',
                                     reply_markup=menu.main_menu)
                    info = func.profile(message.chat.id)
                    bot.send_message(chat_id=settings.admin_id,
                                     text=f'‚úÖ –ö—É–ø–ª–µ–Ω —Ç–æ–≤–∞—Ä\n\n'
                                          f'‚ùï –ö—É–ø–∏–ª - {info[1]}\n'
                                          f'‚ùï –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - {float(product.price)}\n'
                                          f'‚ùï –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ - {datetime.datetime.now()}\n'
                                          f'‚ùï –ö—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä ‚¨áÔ∏è\n\n{lists}')

                    try:
                        bot.send_message(chat_id=f'{settings.CHANNEL_ID}',
                                         text=f'‚úÖ –ö—É–ø–ª–µ–Ω —Ç–æ–≤–∞—Ä\n\n'
                                              f'‚ùï –ö—É–ø–∏–ª - {info[1]}\n'
                                              f'‚ùï –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - {float(product.price)}\n'
                                              f'‚ùï –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ - {datetime.datetime.now()}\n'
                                              f'‚ùï –ö—É–ø–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä ‚¨áÔ∏è\n\n{lists}')


                    except Exception as e:
                        bot.send_message(chat_id=message.chat.id,
                                         text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                                         reply_markup=menu.main_menu)

                if check == 0:
                    bot.send_message(chat_id=message.chat.id,
                                     text='‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')

            else:
                bot.send_message(chat_id=message.chat.id,
                                 text='‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                                 reply_markup=menu.main_menu)
        except:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.main_menu)

    def create_section_2(message):
        try:
            if message.text == 'Yes':
                catalog = catalog_dict[message.chat.id]
                func.add_section_to_catalog(catalog.name)
                bot.send_message(
                    chat_id=message.chat.id,
                    text=f'‚úÖ–†–∞–∑–¥–µ–ª: {catalog.name}\n'
                         f'‚úÖ–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥',
                    reply_markup=menu.admin_menu
                )
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.main_menu)

    def del_section(message):
        try:
            conn = sqlite3.connect("base_ts.sqlite")
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM catalog')
            row = cursor.fetchall()
            cursor.close()
            conn.close()

            name = row[int(message.text)][1]
            nm = row[int(message.text)][0]
            num_catalog = func.Catalog(name)
            catalog_dict[message.chat.id] = num_catalog

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('Yes', 'No')

            msg = bot.send_message(chat_id=message.chat.id,
                                   text=f'{nm}\n–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞—Ç–∞–ª–æ–≥?',
                                   reply_markup=markup)

            bot.register_next_step_handler(msg, del_section_2)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def del_section_2(message):
        try:
            if message.text == 'Yes':
                catalog = catalog_dict[message.chat.id]
                func.del_section_to_catalog(catalog.name)
                bot.send_message(
                    chat_id=message.chat.id,
                    text=f'‚úÖ–†–∞–∑–¥–µ–ª: {catalog.name}\n'
                         f'‚úÖ–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥',
                    reply_markup=menu.admin_menu
                )
            if message.text == 'No':
                bot.send_message(chat_id=message.chat.id,
                                 text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                                 reply_markup=menu.admin_menu)
        except Exception as e:
            print(e)
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def create_product(message):
        try:
            conn = sqlite3.connect("base_ts.sqlite")
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM catalog')
            row = cursor.fetchall()
            cursor.close()
            conn.close()

            name = row[int(message.text)][1]
            num_catalog = func.Product(name)
            product_dict[message.chat.id] = num_catalog

            addproduct = product_dict[message.chat.id]
            addproduct.section = name

            msg = bot.send_message(chat_id=message.chat.id,
                                   text=f'{name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')

            bot.register_next_step_handler(msg, create_product_2)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def create_product_2(message):
        try:
            product_name = message.text
            product = product_dict[message.chat.id]
            product.product = product_name
            product.name = product_name

            msg = bot.send_message(chat_id=message.chat.id,
                                   text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä')
            bot.register_next_step_handler(msg, create_product_3)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def create_product_3(message):
        try:
            price = message.text
            product = product_dict[message.chat.id]
            product.price = price

            msg = bot.send_message(chat_id=message.chat.id,
                                   text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')

            bot.register_next_step_handler(msg, create_product_4)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def create_product_4(message):
        try:
            product = product_dict[message.chat.id]
            product.info = message.text

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('Yes', 'No')

            product_name = f'{product.product} | {product.price} —Ä—É–±'
            msg = bot.send_message(chat_id=message.chat.id,
                                   text=f'{product_name}\n\n'
                                        '–°–æ–∑–¥–∞—Ç—å?',
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, create_product_5)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def create_product_5(message):
        try:
            if message.text == 'Yes':
                product = product_dict[message.chat.id]
                product_name = f'{product.product} | {product.price} —Ä—É–±'

                func.add_product_to_section(product_name, product.price, product.section, product.info, product.product)

                bot.send_message(
                    chat_id=message.chat.id,
                    text=f'‚úÖ–¢–æ–≤–∞—Ä: {product_name}\n'
                         f'‚úÖ–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª',
                    reply_markup=menu.admin_menu
                )
        except Exception as e:
            print(e)
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def del_product(message):
        try:
            conn = sqlite3.connect("base_ts.sqlite")
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM catalog')
            row = cursor.fetchall()
            cursor.close()
            conn.close()

            name = row[int(message.text)][1]
            product = func.AddProduct(name)
            product_dict[message.chat.id] = product

            conn = sqlite3.connect("base_ts.sqlite")
            cursor = conn.cursor()
            cursor.execute(f'SELECT * FROM "{name}"')
            row = cursor.fetchall()
            cursor.close()
            conn.close()

            text = ''
            num = 0

            for i in row:
                text = text + '‚Ññ ' + str(num) + '   |  ' + str(i[0]) + '\n'
                num += 1

            msg = bot.send_message(chat_id=message.chat.id,
                                   text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å\n\n'
                                        f'{text}')
            bot.register_next_step_handler(msg, del_product_2)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def del_product_2(message):
        try:
            product = product_dict[message.chat.id]

            conn = sqlite3.connect("base_ts.sqlite")
            cursor = conn.cursor()
            cursor.execute(f"SELECT * FROM '{product.section}'")
            row = cursor.fetchall()

            name_product = row[int(message.text)][0]
            product.product = name_product

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('Yes', 'No')

            msg = bot.send_message(chat_id=message.chat.id,
                                   text='‚ùï–£–¥–∞–ª–∏—Ç—å ‚¨áÔ∏è\n'
                                        f'‚ùï{product.product}\n\n'
                                        '‚ùï–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ ‚¨áÔ∏è\n'
                                        f'‚ùï{product.section}  ?',
                                   reply_markup=markup)
            bot.register_next_step_handler(msg, del_product_3)
        except Exception as e:
            print(e)
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def del_product_3(message):
        try:
            if message.text == 'Yes':
                product = product_dict[message.chat.id]

                func.del_product_to_section(product.product, product.section)
                bot.send_message(
                    chat_id=message.chat.id,
                    text=f'‚úÖ–¢–æ–≤–∞—Ä: {product.product}\n'
                         f'‚úÖ–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞–∑–¥–µ–ª–∞',
                    reply_markup=menu.admin_menu
                )
            if message.text == 'No':
                bot.send_message(chat_id=message.chat.id,
                                 text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                                 reply_markup=menu.admin_menu)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def download_product(message):
        try:
            conn = sqlite3.connect("base_ts.sqlite")
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM catalog')
            row = cursor.fetchall()

            name_section = row[int(message.text)][1]
            download = func.DownloadProduct(name_section)
            download_dict[message.chat.id] = download

            conn = sqlite3.connect("base_ts.sqlite")
            cursor = conn.cursor()
            cursor.execute(f'SELECT * FROM "{name_section}"')
            row = cursor.fetchall()

            cursor.close()
            conn.close()

            text = ''
            num = 0

            for i in row:
                text = text + '‚Ññ ' + str(num) + '   |  ' + str(i[0]) + '\n'
                num += 1

            msg = bot.send_message(chat_id=message.chat.id,
                                   text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞\n\n'
                                        f'{text}')

            bot.register_next_step_handler(msg, download_product_2)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def download_product_2(message):
        try:
            product = download_dict[message.chat.id]

            conn = sqlite3.connect("base_ts.sqlite")
            cursor = conn.cursor()
            cursor.execute(f'SELECT * FROM "{product.name_section}"')
            row = cursor.fetchall()

            product.name_product = row[int(message.text)][2]

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup.add('Yes', 'No')

            msg = bot.send_message(chat_id=message.chat.id,
                                   text='–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ ‚¨áÔ∏è\n\n'
                                        f'ID - {product.name_product}',
                                   reply_markup=markup)

            bot.register_next_step_handler(msg, download_product_3)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def download_product_3(message):
        try:
            if message.text == 'Yes':
                msg = bot.send_message(chat_id=message.chat.id,
                                       text='‚ùï–û—Ç–ø—Ä–∞–≤—å—Ç–µ txt —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–æ–º\n\n'
                                            '‚ùóÔ∏è 1 —Å—Ç—Ä–æ—á–∫–∞ = 1 —Ç–æ–≤–∞—Ä—É!!!\n\n'
                                            '‚ùóÔ∏è –ü–†–ò–ú–ï–† –§–ê–ô–õ–ê:\n'
                                            'main@mail.ru:password\n'
                                            'QWERT-QWERY-QWERY\n'
                                            '–∫–∞–∫–∞—è-—Ç–æ_—Å—Å—ã–ª–∫–∞.ru')

                bot.register_next_step_handler(msg, download_product_4)

            if message.text == 'No':
                bot.send_message(chat_id=message.chat.id,
                                 text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞',
                                 reply_markup=menu.admin_menu)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    def admin_sending_messages(message):
        try:
            dict = func.Admin_sending_messages(message.chat.id)
            admin_sending_messages_dict[message.chat.id] = dict

            dict = admin_sending_messages_dict[message.chat.id]
            dict.text = message.text

            msg = bot.send_message(message.chat.id,
                                   text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–ü–û–î–¢–í–ï–†–î–ò–¢–¨" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
            bot.register_next_step_handler(msg, admin_sending_messages_2)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.main_menu)

    def admin_sending_messages_2(message):
        try:
            conn = sqlite3.connect('base_ts.sqlite')
            cursor = conn.cursor()
            dict = admin_sending_messages_dict[message.chat.id]
            if message.text == '–ü–û–î–¢–í–ï–†–î–ò–¢–¨':
                cursor.execute(f'SELECT * FROM users')
                row = cursor.fetchall()

                for i in range(len(row)):
                    try:
                        time.sleep(1)
                        bot.send_message(row[i][0], dict.text)

                    except:
                        pass
            else:
                bot.send_message(message.chat.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.main_menu)

    def btc(message):
        try:
            response = requests.get(url='https://www.binance.com/fapi/v1/ticker/price?symbol=BTCBUSD').json()
            cost = response.get('price')
            rub = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
            usd = rub.get('Valute')
            ur = usd.get('USD')
            ur = ur.get('Value')

            sums = float(message.text) / float(cost) / float(ur)
            sums = float("%.7f" % sums)

            replenishment_dict[message.chat.id] = func.replenishment("BTC", message.from_user.username, message.text,
                                                                     sums, message.from_user.id)
            temp = replenishment_dict[message.chat.id]
            func.create_pay(message.from_user.username, message.text, temp.valute, temp.code, sums, message.chat.id,
                            message.from_user.id)
            bot.send_message(chat_id=message.chat.id,
                             text=f'üßæ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω\n'
                                  f'üíµ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å:\n'
                                  f'‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n'
                                  f'üí≤ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {sums} BTC\n'
                                  f'‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ: –Ø –æ–ø–ª–∞—Ç–∏–ª',
                             reply_markup=menu.btc)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text=f'‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É\n'
                                  f'–í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
                             reply_markup=menu.main_menu)

    def xmr(message):
        try:
            response = requests.get(url='https://www.binance.com/fapi/v1/ticker/price?symbol=XMRUSDT').json()
            cost = response.get('price')
            rub = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
            usd = rub.get('Valute')
            ur = usd.get('USD')
            ur = ur.get('Value')

            sums = float(message.text) / float(cost) / float(ur)

            sums = float("%.7f" % sums)
            replenishment_dict[message.chat.id] = func.replenishment("BTC", message.from_user.username, message.text,
                                                                     sums, message.from_user.id)

            temp = replenishment_dict[message.chat.id]
            func.create_pay(message.from_user.username, message.text, temp.valute, temp.code, sums, message.chat.id,
                            message.from_user.id)

            bot.send_message(chat_id=message.chat.id,
                             text=f'üßæ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω\n'
                                  f'üíµ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å:\n'
                                  f'‚ö†Ô∏è 4B8QbrEc2fa61umDsRycJxC2gKVT79Yw4EQNUSAbt4RDdHGTHiN99UjBE4HuPWV2EScGmgBfJ29bWAWEVCynvduHALG5pmd\n'
                                  f'üí≤ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {sums} XMR\n'
                                  f'‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ: –Ø –æ–ø–ª–∞—Ç–∏–ª',
                             reply_markup=menu.btc)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text=f'‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É\n'
                                  f'–í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
                             reply_markup=menu.main_menu)

    def bnb(message):
        try:
            response = requests.get(url='https://www.binance.com/fapi/v1/ticker/price?symbol=BNBBUSD').json()
            cost = response.get('price')
            rub = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
            usd = rub.get('Valute')
            ur = usd.get('USD')
            ur = ur.get('Value')
            sums = float(message.text) / float(cost) / float(ur)
            sums = float("%.7f" % sums)
            replenishment_dict[message.chat.id] = func.replenishment("BNB", message.from_user.username, message.text,
                                                                     sums, message.from_user.id)
            temp = replenishment_dict[message.chat.id]
            func.create_pay(message.from_user.username, message.text, temp.valute, temp.code, sums, message.chat.id,
                            message.from_user.id)

            bot.send_message(chat_id=message.chat.id,
                             text=f'üßæ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω\n'
                                  f'üíµ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å:\n'
                                  f'‚ö†Ô∏è 0xC3878fe1796210054191448FCF7F4E53710CdD1f\n'
                                  f'‚ö† –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏:\n'
                                  f'BSC, Polygon Mainnet,  Ethereum Mainnet\n'
                                  f'üí≤ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {sums} BNB\n'
                                  f'‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ: –Ø –æ–ø–ª–∞—Ç–∏–ª',
                             reply_markup=menu.btc)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text=f'‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É\n'
                                  f'–í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
                             reply_markup=menu.main_menu)

    def usdt(message):
        try:
            response = requests.get(url='https://yobit.net/api/3/ticker/usdt_rur').json()
            btc_rur = response.get('usdt_rur')
            cost = btc_rur.get('sell')
            sums = float(message.text) / float(cost)
            replenishment_dict[message.chat.id] = func.replenishment("USDT", message.from_user.username, message.text,
                                                                     sums, message.from_user.id)

            temp = replenishment_dict[message.chat.id]
            func.create_pay(message.from_user.username, message.text, temp.valute, temp.code, sums, message.chat.id,
                            message.from_user.id)
            sums = float("%.7f" % sums)

            bot.send_message(chat_id=message.chat.id,
                             text=f'üßæ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω\n'
                                  f'üíµ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å:\n'
                                  f'‚ö†Ô∏è 0xC3878fe1796210054191448FCF7F4E53710CdD1f\n'
                                  f'‚ö† –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏:\n'
                                  f' BSC, Polygon Mainnet,  Ethereum Mainnet\n'
                                  f'üí≤ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {sums} USDT\n'
                                  f'‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ: –Ø –æ–ø–ª–∞—Ç–∏–ª',
                             reply_markup=menu.btc)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text=f'‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É\n'
                                  f'–í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
                             reply_markup=menu.main_menu)

    def usdc(message):
        try:
            response = requests.get(url='https://yobit.net/api/3/ticker/usdc_rur').json()
            btc_rur = response.get('usdc_rur')
            cost = btc_rur.get('sell')
            sums = float(message.text) / float(cost)
            sums = float("%.7f" % sums)
            replenishment_dict[message.chat.id] = func.replenishment("USDC", message.from_user.username, message.text,
                                                                     sums, message.from_user.id)

            temp = replenishment_dict[message.chat.id]
            func.create_pay(message.from_user.username, message.text, temp.valute, temp.code, sums, message.chat.id,
                            message.from_user.id)

            bot.send_message(chat_id=message.chat.id,
                             text=f'üßæ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω\n'
                                  f'üíµ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å:\n'
                                  f'‚ö†Ô∏è 0xC3878fe1796210054191448FCF7F4E53710CdD1f\n'
                                  f'‚ö† –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏:\n'
                                  f'BSC, Polygon Mainnet,  Ethereum Mainnet\n'
                                  f'üí≤ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {sums} USDC\n'
                                  f'‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ: –Ø –æ–ø–ª–∞—Ç–∏–ª',
                             reply_markup=menu.btc)
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text=f'‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É\n'
                                  f'–í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
                             reply_markup=menu.main_menu)

    # def dash(message):
    #     try:
    #
    #         response = requests.get(url='https://www.binance.com/fapi/v1/ticker/price?symbol=DASHUSDT').json()
    #         cost = response.get('price')
    #         rub = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
    #         usd = rub.get('Valute')
    #         ur = usd.get('USD')
    #         ur = ur.get('Value')
    #
    #         sums = float(message.text) / float(cost) / float(ur)
    #
    #         sums = float("%.7f" % sums)
    #         replenishment_dict[message.chat.id] = func.replenishment("BTC", message.from_user.username, message.text,
    #                                                                  sums)
    #         temp = replenishment_dict[message.chat.id]
    #         func.create_pay(message.from_user.username, message.text, temp.valute, temp.code, sums, message.chat.id)
    #
    #         bot.send_message(chat_id=message.chat.id,
    #                          text=f'üßæ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω\n'
    #                               f'üíµ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–¥—Ä–µ—Å:\n'
    #                               f'‚ö†Ô∏è bc1qexryydr38chd0rwpk3xexxeed0g0pmufa0tg5l\n'
    #                               f'üí≤ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {sums} DASH\n'
    #                               f'‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ: –Ø –æ–ø–ª–∞—Ç–∏–ª',
    #                          reply_markup=menu.btc)
    #     except Exception as e:
    #         bot.send_message(chat_id=message.chat.id,
    #                          text=f'‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É\n'
    #                               f'–í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
    #                          reply_markup=menu.main_menu)

    def ok_pay(message):
        try:
            row = func.ok_pays(message.text)
            for i in row:
                btn_ok = types.InlineKeyboardMarkup(row_width=3)
                btn_ok.add(
                    types.InlineKeyboardButton(text='‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=int(i[4])),
                    types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=int(i[4] + 1000))
                )
                bot.send_message(chat_id=message.chat.id,
                                 text=f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–ª–∞—Ç–µ–∂–∞: {i[4]}\n'
                                      f'Username: {i[0]}\n'
                                      f'–°—É–º–º–∞: {i[1]}\n'
                                      f'–¢–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {i[3]}\n'
                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã: {i[5]}\n',
                                 reply_markup=btn_ok,
                                 )
                ok_pay_dict[int(i[4])] = func.ok(i[4], i[7], i[0], i[1], i[8])
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text=f'‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É\n'
                                  f'–í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
                             reply_markup=menu.main_menu)

    def ok_pay2(message):
        try:
            row = func.ok_pays2(message.text)
            for i in row:
                btn_ok = types.InlineKeyboardMarkup(row_width=3)
                btn_ok.add(
                    types.InlineKeyboardButton(text='‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=int(i[4])),
                    types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=int(i[4] + 1000))
                )
                bot.send_message(chat_id=message.chat.id,
                                 text=f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–ª–∞—Ç–µ–∂–∞: {i[4]}\n'
                                      f'Username: {i[0]}\n'
                                      f'–°—É–º–º–∞: {i[1]}\n'
                                      f'–¢–∏–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {i[3]}\n'
                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã: {i[5]}\n',
                                 reply_markup=btn_ok,
                                 )
                ok_pay_dict[int(i[4])] = func.ok(i[4], i[7], i[0], i[1], i[8])
        except Exception as e:
            bot.send_message(chat_id=message.chat.id,
                             text=f'‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É\n'
                                  f'–í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã',
                             reply_markup=menu.main_menu)

    @bot.message_handler(content_types=['document'])
    def download_product_4(message):
        try:
            chat_id = message.chat.id
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            download = download_dict[message.chat.id]

            with open(message.document.file_name, 'wb') as doc:
                doc.write(downloaded_file)

            func.download_product(message.document.file_name, download.name_product)

            bot.send_message(chat_id=chat_id,
                             text='‚ùï –¢–æ–≤–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω üëç')
        except Exception as e:
            pass
            bot.send_message(chat_id=message.chat.id,
                             text='–£–ø—Å—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É')

    bot.polling(none_stop=True)


start_bot()
